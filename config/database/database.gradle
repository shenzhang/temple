import groovy.sql.Sql

ext {
    schemaDir = file('config/database/schema')
    dataDir = file('config/database/data')
}

configurations {
    driver
}

dependencies {
    driver 'postgresql:postgresql:9.1-901.jdbc4'
    driver 'org.xerial:sqlite-jdbc:3.7.2'
}

task loadDriver << {
    URLClassLoader loader = GroovyObject.class.classLoader
    configurations.driver.each { File file ->
        loader.addURL(file.toURL())
    }
}

def executeSql(connection, sql) {
    sql = sql.trim()
    if (sql.length() > 0) {
        println(sql)
        connection.execute(sql)
    }
}

def createSchema(connection, fileName) {
    println "begin create schema from $fileName"

    def file = new File(schemaDir, fileName)
    def sql = new StringBuilder()
    file.eachLine {
        sql.append(it)
    }

    sql.toString().split(';').each() {
        executeSql(connection, it)
    }
}

def importData(connection, fileName) {
    println "import data from $fileName"

    def file = new File(dataDir, fileName)
    def sql = new StringBuilder()
    file.eachLine {
        sql.append(it)
    }

    sql.toString().split(';').each() {
        executeSql(connection, it);
    }
}

task createDB(dependsOn: loadDriver) << {
    println 'begin create database...\n'

    delete 'config/database/temple.db'

    def connection = Sql.newInstance("$dbUrl", "$dbUser", "$dbPassword", "$dbDriver")

    createSchema(connection, 'create-db.sql')

    println '\n'

    importData(connection, 'user.sql');
    importData(connection, 'temple.sql');
    importData(connection, 'city.sql');

    connection.close()

    println '\ndone'
}